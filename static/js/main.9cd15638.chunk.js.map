{"version":3,"sources":["Actions/api.js","Actions/index.js","routes.js","Components/Login/Login.jsx","Components/Login/index.js","Components/Register/Register.jsx","Components/Register/index.js","Components/Header/Header.jsx","Components/Header/index.js","Components/Main/Main.jsx","Components/Main/index.js","Components/AddArticle/AddArticle.jsx","Components/AddArticle/index.js","Container/App.jsx","Container/index.js","Reducers/index.js","serviceWorker.js","index.jsx"],"names":["instance","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","common","Authorization","login","createAction","loginSuccess","loginFailure","logout","register","registerSuccess","registerFailure","createArticleRequest","createArticleSuccess","createArticleFailure","getArticlesRequest","getArticlesSuccess","getArticlesFailure","getTotalArticlesCount","switchPage","loginWithJWT","dispatch","a","get","response","status","data","user","username","loginUser","values","post","message","success","setItem","error","logoutUser","removeItem","registerUser","createArticle","console","log","article","getArticleList","setTimeout","window","history","back","articles","articlesCount","home","main","add_article","mapDispatchToProps","signin","actions","connect","Login","state","userStatus","props","className","initialValues","email","password","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","required","name","onChange","onBlur","value","Password","type","htmlType","to","routes","SignupSchema","yup","shape","max","min","Register","registerStatus","validationSchema","as","Button","signout","Header","userName","loggedIn","UserOutlined","onClick","LogoutOutlined","Main","articleList","currentPage","renderLoader","active","size","onLoad","length","PlusCircleOutlined","Array","isArray","map","heading","title","body","slug","author","likesCount","favoritesCount","tagList","key","HeartTwoTone","twoToneColor","tag","page","defaultCurrent","defaultPageSize","total","hideOnSinglePage","showSizeChanger","TextArea","Input","AddArticle","LeftCircleOutlined","description","valuesWithTags","split","rows","App","localStoreToken","exact","path","component","handleActions","_state","payload","combineReducers","Boolean","location","hostname","match","store","createStore","reducers","compose","applyMiddleware","ReduxThunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","classname","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9cd15638.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://conduit.productionready.io/api\",\r\n});\r\n\r\ninstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.common.Authorization = `Token ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport default instance;","import axios from \"axios\";\r\nimport { createAction } from \"redux-actions\";\r\nimport { message } from \"antd\";\r\nimport instance from \"./api\";\r\n\r\nexport const login = createAction(\"LOGIN_REQUEST\");\r\nexport const loginSuccess = createAction(\"LOGIN_SUCCESS\");\r\nexport const loginFailure = createAction(\"LOGIN_FAILURE\");\r\nexport const logout = createAction(\"LOGOUT\");\r\n\r\nexport const register = createAction(\"REGISTER_REQUEST\");\r\nexport const registerSuccess = createAction(\"REGISTER_SUCCESS\");\r\nexport const registerFailure = createAction(\"REGISTER_FAILURE\");\r\n\r\nexport const createArticleRequest = createAction(\"CREATE_REQUEST\");\r\nexport const createArticleSuccess = createAction(\"CREATE_SUCCESS\");\r\nexport const createArticleFailure = createAction(\"CREATE_FAILURE\");\r\n\r\nexport const getArticlesRequest = createAction(\"GET_ARTICLES_REQUEST\");\r\nexport const getArticlesSuccess = createAction(\"GET_ARTICLES_SUCCESS\");\r\nexport const getArticlesFailure = createAction(\"GET_ARTICLES_FAILURE\");\r\n\r\nexport const getTotalArticlesCount = createAction(\"GET_TOTAL_ARTICLES_COUNT\");\r\nexport const switchPage = createAction(\"SWITCH_PAGE\");\r\n\r\nexport const loginWithJWT = () => async (dispatch) => {\r\n  dispatch(login());\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const response = await axios.get(\r\n      \"https://conduit.productionready.io/api/user\",\r\n      {\r\n        headers: {\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      }\r\n    );\r\n    if (response.status === 200) {\r\n      const { username, token } = response.data.user;\r\n      dispatch(\r\n        loginSuccess({\r\n          username: username,\r\n          token: token,\r\n        })\r\n      );\r\n    }\r\n  } catch (error) {\r\n    dispatch(loginFailure());\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loginUser = (values) => async (dispatch) => {\r\n  dispatch(login());\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://conduit.productionready.io/api/users/login\",\r\n      { user: values }\r\n    );\r\n    const { token, username } = response.data.user;\r\n    if (response.status === 200) {\r\n      message.success(`Добро пожаловать ${username}`);\r\n      localStorage.setItem(\"token\", token);\r\n      dispatch(\r\n        loginSuccess({\r\n          username: username,\r\n          token: token,\r\n        })\r\n      );\r\n    }\r\n  } catch (error) {\r\n    message.error(\"Пара логин и пароль не найдена\");\r\n    dispatch(loginFailure());\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => async (dispatch) => {\r\n  localStorage.removeItem(\"token\");\r\n  dispatch(logout());\r\n};\r\n\r\nexport const registerUser = (values) => async (dispatch) => {\r\n  dispatch(register());\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://conduit.productionready.io/api/users\",\r\n      { user: values }\r\n    );\r\n    if (response.status === 200) {\r\n      message.success(\"Вы успешно зрегистрированы!\");\r\n      dispatch(registerSuccess());\r\n    }\r\n  } catch (error) {\r\n    message.error(\"Email или имя пользователя уже зарегистрированы!\");\r\n    dispatch(registerFailure());\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createArticle = (values) => async (dispatch) => {\r\n  dispatch(createArticleRequest());\r\n  console.log(values);\r\n  // const valuesWithTags = {\r\n  //   title: values.title,\r\n  //   description: values.description,\r\n  //   body: values.body,\r\n  //   tagList: values.tagList ? values.tagList.split(\" \") : \"\",\r\n  // };\r\n  // console.log(valuesWithTags);\r\n  try {\r\n    const response = await instance.post(\"/articles\", values);\r\n    console.log(response);\r\n    if (response.status === 200) {\r\n      message.success(`Успешно!`);\r\n      dispatch(createArticleSuccess(response.data.article));\r\n      getArticleList();\r\n      setTimeout(() => window.history.back(), 1500);\r\n    }\r\n  } catch (error) {\r\n    dispatch(createArticleFailure());\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const getArticleList = () => async (dispatch) => {\r\n  dispatch(getArticlesRequest());\r\n  try {\r\n    const response = await instance.get(\"/articles?limit=10\");\r\n    console.log(response.data);\r\n    if (response.status === 200) {\r\n      dispatch(getArticlesSuccess(response.data.articles));\r\n      dispatch(getTotalArticlesCount(response.data.articlesCount));\r\n    }\r\n  } catch (error) {\r\n    dispatch(createArticleFailure());\r\n  }\r\n};\r\n","export const home = \"/Blog-platform-with-router\";\r\nexport const login = `${home}/login`;\r\nexport const register = `${home}/register`;\r\nexport const main = `${home}/articles`;\r\nexport const add_article = `${main}/add`;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport { Link } from \"react-router-dom\";\nimport * as actions from \"../../Actions\";\nimport { Input, Button, Divider } from \"antd\";\nimport * as routes from \"../../routes.js\";\nimport \"antd/dist/antd.css\";\nimport \"./login.css\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    username: state.user.username,\n    token: state.user.token,\n    signin: actions.loginUser,\n    userStatus: state.user,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  signin: actions.loginUser,\n};\n\nfunction Login(props) {\n  const { signin } = props;\n\n  return (\n    <div className=\"login-form\">\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        // validationSchema={SignupSchema}\n        onSubmit={(values) => signin(values)}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <div className={isSubmitting ? \"submitting-form\" : \"\"}>\n            <Form className=\"login-form___login\">\n              <label>\n                Email:\n                <Input\n                  required\n                  className={errors.email && touched.email && \"error\"}\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                />\n              </label>\n              <label>\n                Пароль:\n                <Input.Password\n                  required\n                  className={errors.password && touched.password && \"error\"}\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n              </label>\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                Войти\n              </Button>\n            </Form>\n            <Divider />\n            <Link className=\"login-form__register\" to={routes.register}>\n              Регистрация\n            </Link>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import Login from './Login';\r\n\r\nexport default Login;","import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Input, Button, Divider } from \"antd\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../Actions\";\nimport \"antd/dist/antd.css\";\nimport \"./register.css\";\nimport * as routes from \"../../routes.js\";\nimport * as yup from 'yup';\n\nconst SignupSchema = yup.object().shape({\n  username: yup.string().max(50, 'Слишком длинное имя').required('Поле обязательно для заполнения'),\n  email: yup.string().email('Неверный email').required('Поле обязательно для заполнения'),\n  password: yup\n    .string()\n    .min(8, 'Пароль должен содержать не менее 8 символов')\n    .max(40, 'Пароль должен содержать не более 40 символов')\n    .required('Поле обязательно для заполнения'),\n});\n\nconst mapStateToProps = (state) => {\n  const props = {\n    registerUser: actions.registerUser,\n    registerStatus: state.registerStatus,\n    token: state.user.token,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  registerUser: actions.registerUser,\n};\n\nfunction Register(props) {\n  const { registerUser } = props;\n\n  if (props.registerStatus === \"register-success\") {\n    return <Redirect to={routes.login} />;\n  }\n\n  return (\n    <div className=\"register-form\">\n      <Formik\n        initialValues={{\n          username: \"\",\n          email: \"\",\n          password: \"\",\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values) => {\n          registerUser(values);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <div className={isSubmitting ? \"submitting-form\" : \"\"}>\n            <Form className=\"register-form___registration\">\n              <label>\n                Имя пользователя:\n                <Input\n                  className={errors.username && touched.username && \"error\"}\n                  required\n                  name=\"username\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.username}\n                />\n              </label>\n              <label>\n                Email:\n                <Input\n                  className={errors.email && touched.email && \"error\"}\n                  required\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                />\n              </label>\n              {errors.email && touched.email && (\n                  <div className=\"input-error\">{errors.email}</div>\n                )}\n              <label>\n                Пароль:\n                <Input.Password\n                  className={errors.password && touched.password && \"error\"}\n                  required\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-error\">{errors.password}</div>\n                )}\n              </label>\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                Регистрация\n              </Button>\n            </Form>\n            <Divider />\n            <Link className=\"register-form__signin\" as={Button} to={routes.login}>\n              Войти\n            </Link>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\n","import Register from './Register';\r\n\r\nexport default Register;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Spin } from \"antd\";\r\nimport { UserOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport * as actions from \"../../Actions\";\r\nimport * as routes from \"../../routes.js\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./header.css\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  const props = {\r\n    user: state.user,\r\n    userName: state.user.username,\r\n    loggedIn: state.loggedIn,\r\n    signout: actions.logoutUser,\r\n  };\r\n\r\n  return props;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  signout: actions.logoutUser,\r\n};\r\n\r\nfunction Header(props) {\r\n  const { userName, signout, user } = props;\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div>\r\n        Пользователь: <UserOutlined />\r\n        {user === \"requested\" ? <Spin /> : userName}\r\n      </div>\r\n      <Button className=\"header__logout\" onClick={signout} to={routes.home}>\r\n        <LogoutOutlined /> Выйти\r\n      </Button>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import Header from './Header';\r\n\r\nexport default Header;","import React from \"react\";\nimport { BackTop, Skeleton, Divider, Tag, Pagination } from \"antd\";\nimport { connect } from \"react-redux\";\nimport {\n  PlusCircleOutlined,\n  HeartTwoTone,\n  UserOutlined,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport * as routes from \"../../routes.js\";\nimport Header from \"../Header\";\nimport \"antd/dist/antd.css\";\nimport \"./main.css\";\nimport * as actions from \"../../Actions\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    articleList: state.articleList,\n    getArticleList: actions.getArticleList,\n    currentPage: state.currentPage,\n    switchPage: actions.switchPage,\n    articlesCount: state.articlesCount,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  getArticleList: actions.getArticleList,\n  switchPage: actions.switchPage,\n};\n\nfunction Main(props) {\n  const {\n    articleList,\n    getArticleList,\n    switchPage,\n    articlesCount,\n    currentPage,\n  } = props;\n\n  const renderPagination = () => {\n    return (\n      <Pagination\n        onChange={(page) => switchPage(page)}\n        defaultCurrent=\"1\"\n        defaultPageSize=\"10\"\n        total={articlesCount / 10}\n        hideOnSinglePage\n        showSizeChanger={true}\n      />\n    );\n  };\n\n  const renderArticle = (heading, body, slug, author, likesCount, tagList) => {\n    return (\n      <div key={slug} className=\"main__wall__post\">\n        <h3 className=\"main__wall__post__heading\">\n          {heading}\n          <p className=\"main__wall__post__author\">\n            Автор: <UserOutlined />\n            {author}\n          </p>\n        </h3>\n        <p>{body}</p>\n        <Divider />\n        <div className=\"main__wall__post__footer\">\n          <p>\n            <HeartTwoTone twoToneColor=\"#ff0000\" /> {likesCount}\n          </p>\n          <div>\n            {tagList.map((tag) => (\n              <Tag className=\"main__wall__post__footer__tag\" key={tag}>\n                {tag}\n              </Tag>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderLoader = () => {\n    return (\n      <div className=\"skeleton-loader\">\n        <Skeleton active size=\"large\" className=\"main__wall__loading\" />\n      </div>\n    );\n  };\n\n  const loadingArticles = () => {\n    if (articleList.length === 0) {\n      getArticleList(currentPage);\n    }\n  };\n\n  return (\n    <div onLoad={loadingArticles()} className=\"main\">\n      <Header />\n      <div className=\"main__wall\">\n        <Link to={routes.add_article} className=\"main__wall__create\">\n          <PlusCircleOutlined />\n          СОЗДАТЬ\n        </Link>\n        {Array.isArray(articleList) ? (\n          articleList.map((article) => {\n            return renderArticle(\n              article.title,\n              article.body,\n              article.slug,\n              article.author.username,\n              article.favoritesCount,\n              article.tagList\n            );\n          })\n        ) : (\n          <div>\n            {renderLoader()}\n            {renderLoader()}\n            {renderLoader()}\n            {renderLoader()}\n            {renderLoader()}\n            {renderLoader()}\n          </div>\n        )}\n      </div>\n      {renderPagination()}\n      <BackTop />\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import Main from './Main';\r\n\r\nexport default Main;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Input, Button } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { LeftCircleOutlined } from \"@ant-design/icons\";\r\nimport * as routes from \"../../routes.js\";\r\nimport * as actions from \"../../Actions\";\r\nimport Header from \"../Header\";\r\nimport \"./addArticle.css\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst mapStateToProps = (state) => {\r\n  const props = {\r\n    userName: state.user.username,\r\n    loggedIn: state.loggedIn,\r\n    signout: actions.logoutUser,\r\n    createArticle: actions.createArticle,\r\n  };\r\n\r\n  return props;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  createArticle: actions.createArticle,\r\n};\r\n\r\nfunction AddArticle(props) {\r\n  const { createArticle } = props;\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n      <main className=\"article-form\">\r\n        <h2>\r\n          <Link to={routes.main}>\r\n            <LeftCircleOutlined />\r\n          </Link>{\" \"}\r\n          Создать статью\r\n        </h2>\r\n        <Formik\r\n          initialValues={{\r\n            title: \"\",\r\n            description: \"\",\r\n            body: \"\",\r\n            tagList: \"\",\r\n          }}\r\n          onSubmit={(values) => {\r\n            const valuesWithTags = {\r\n              title: values.title,\r\n              description: values.description,\r\n              body: values.body,\r\n              tagList: values.tagList ? values.tagList.split(\" \") : [],\r\n            };\r\n            createArticle(valuesWithTags);\r\n          }}\r\n        >\r\n          {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleBlur,\r\n            isSubmitting,\r\n          }) => (\r\n            <div className={isSubmitting ? \"submitting-form\" : \"\"}>\r\n              <Form className=\"login-form___login\">\r\n                <label>\r\n                  Заголовок:\r\n                  <Input\r\n                    required\r\n                    className=\"title\"\r\n                    name=\"title\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.title}\r\n                  />\r\n                </label>\r\n                <label>\r\n                  Описание:\r\n                  <Input\r\n                    required\r\n                    className=\"description\"\r\n                    name=\"description\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.description}\r\n                  />\r\n                </label>\r\n                <label>\r\n                  Статья:\r\n                  <TextArea\r\n                    className=\"body\"\r\n                    name=\"body\"\r\n                    rows={5}\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.body}\r\n                  />\r\n                </label>\r\n                <label>\r\n                  Теги:\r\n                  <Input\r\n                    className=\"tagList\"\r\n                    name=\"tagList\"\r\n                    onChange={handleChange}\r\n                    onBlur={handleBlur}\r\n                    value={values.tagList}\r\n                  />\r\n                </label>\r\n                <Button\r\n                  className=\"submit-button\"\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  Написать\r\n                </Button>\r\n              </Form>\r\n            </div>\r\n          )}\r\n        </Formik>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddArticle);\r\n","import AddArticle from './AddArticle';\r\n\r\nexport default AddArticle;","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport * as actions from \"../Actions\";\nimport { connect } from \"react-redux\";\nimport * as routes from \"../routes.js\";\nimport Login from \"../Components/Login\";\nimport Register from \"../Components/Register\";\nimport Main from \"../Components/Main\";\nimport AddArticle from \"../Components/AddArticle\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    username: state.user.username,\n    token: state.user.token,\n    loginWithJWT: actions.loginWithJWT,\n    userStatus: state.user,\n    registerStatus: state.registerStatus,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  loginWithJWT: actions.loginWithJWT,\n};\n\nfunction App(props) {\n  const { loginWithJWT, token } = props;\n  const localStoreToken = localStorage.getItem(\"token\");\n\n  const startTokenChecking = () => {\n    if (!localStoreToken && !token) {\n      return <Redirect to={routes.login} />;\n    }\n    if (localStoreToken && !token) {\n      loginWithJWT(localStoreToken);\n      return <Redirect to={routes.main} />;\n    }\n    return <Redirect to={routes.main} />;\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path={routes.home}>\n            {startTokenChecking()}\n          </Route>\n          <Route path={routes.login} exact component={Login}>\n            {localStoreToken ? <Redirect to={routes.main} /> : null}\n          </Route>\n          <Route path={routes.register} exact component={Register}>\n            {localStoreToken ? <Redirect to={routes.main} /> : null}\n          </Route>\n          <Route path={routes.main} exact component={Main}>\n            {!localStoreToken ? <Redirect to={routes.login} /> : null}\n          </Route>\n          <Route path={routes.add_article} exact component={AddArticle}>\n            {!localStoreToken ? <Redirect to={routes.login} /> : null}\n          </Route>\n          <Route path=\"*\" component={() => \"404 ТАКОЙ СТРАНИЦЫ НЕ СУЩЕСТВУЕТ!\"} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import App from './App.jsx';\r\n\r\nexport default App;","import { combineReducers } from \"redux\";\r\nimport { handleActions } from \"redux-actions\";\r\nimport * as actions from \"../Actions\";\r\n\r\nconst user = handleActions(\r\n  {\r\n    [actions.login](_state) {\r\n      return \"requested\";\r\n    },\r\n    [actions.loginSuccess](_state, { payload: userData }) {\r\n      return userData;\r\n    },\r\n    [actions.loginFailure](_state) {\r\n      return \"error\";\r\n    },\r\n    [actions.logout](_state) {\r\n      return {};\r\n    },\r\n  },\r\n  {}\r\n);\r\n\r\nconst registerStatus = handleActions(\r\n  {\r\n    [actions.register](_state) {\r\n      return \"requested\";\r\n    },\r\n    [actions.registerSuccess](_state) {\r\n      return \"register-success\";\r\n    },\r\n    [actions.registerFailure](_state) {\r\n      return \"register-error\";\r\n    },\r\n  },\r\n  {}\r\n);\r\n\r\nconst createArticle = handleActions(\r\n  {\r\n    [actions.createArticleRequest](_state) {\r\n      return \"create-requested\";\r\n    },\r\n    [actions.createArticleSuccess](_state, { payload: article }) {\r\n      return \"create-succes\";\r\n    },\r\n    [actions.createArticleFailure](_state) {\r\n      return \"create-error\";\r\n    },\r\n  },\r\n  {}\r\n);\r\n\r\nconst articleList = handleActions(\r\n  {\r\n    [actions.getArticlesRequest](_state) {\r\n      return \"getting-requested\";\r\n    },\r\n    [actions.getArticlesSuccess](_state, { payload: articles }) {\r\n      return [...articles];\r\n    },\r\n    [actions.getArticlesFailure](_state) {\r\n      return \"getting-error\";\r\n    },\r\n  },\r\n  []\r\n);\r\n\r\nconst articlesCount = handleActions(\r\n  {\r\n    [actions.getTotalArticlesCount](_state, { payload: totalCount }) {\r\n      return totalCount;\r\n    },\r\n  },\r\n  0\r\n);\r\n\r\nconst currentPage = handleActions(\r\n  {\r\n    [actions.switchPage](_state, { payload: page }) {\r\n      return page;\r\n    },\r\n  },\r\n  1\r\n);\r\n\r\nexport default combineReducers({\r\n  user,\r\n  registerStatus,\r\n  createArticle,\r\n  articleList,\r\n  articlesCount,\r\n  currentPage,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReduxThunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport './index.css';\nimport App from './Container';\nimport reducers from './Reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(ReduxThunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  )\n);\n\nReactDOM.render(\n  <Provider classname=\"store\" store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}