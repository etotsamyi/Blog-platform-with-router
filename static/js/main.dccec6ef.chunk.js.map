{"version":3,"sources":["Actions/index.js","routes.js","Components/Login/Login.jsx","Components/Login/index.js","Components/Register/Register.jsx","Components/Register/index.js","Components/Main/Main.jsx","Components/Main/index.js","Container/App.jsx","Container/index.js","Reducers/index.js","serviceWorker.js","index.jsx"],"names":["login","createAction","loginSuccess","loginFailure","logout","register","registerSuccess","registerFailure","loginWithJWT","dispatch","a","token","localStorage","getItem","axios","get","headers","Authorization","response","status","data","user","username","loginUser","values","post","setItem","logoutUser","removeItem","registerUser","home","main","mapDispatchToProps","signin","actions","connect","Login","state","userStatus","props","to","routes","className","initialValues","email","password","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","required","name","onChange","onBlur","value","Password","type","htmlType","SignupSchema","yup","shape","max","min","Register","registerStatus","validationSchema","as","Button","signout","Main","userName","loggedIn","UserOutlined","onClick","LogoutOutlined","App","message","error","exact","path","localStoreToken","localTokenChecking","component","handleActions","_state","payload","combineReducers","Boolean","window","location","hostname","match","store","createStore","reducers","compose","applyMiddleware","ReduxThunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","classname","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.dccec6ef.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { createAction } from \"redux-actions\";\r\n\r\nexport const login = createAction(\"LOGIN_REQUEST\");\r\nexport const loginSuccess = createAction(\"LOGIN_SUCCESS\");\r\nexport const loginFailure = createAction(\"LOGIN_FAILURE\");\r\nexport const logout = createAction(\"LOGOUT\");\r\n\r\nexport const register = createAction(\"REGISTER_REQUEST\");\r\nexport const registerSuccess = createAction(\"REGISTER_SUCCESS\");\r\nexport const registerFailure = createAction(\"REGISTER_FAILURE\");\r\n\r\nexport const loginWithJWT = () => async (dispatch) => {\r\n  dispatch(login());\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const response = await axios.get(\r\n      \"https://conduit.productionready.io/api/user\",\r\n      {\r\n        headers: {\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      }\r\n    );\r\n    if (response.status === 200) {\r\n      const { username, token } = response.data.user;\r\n      dispatch(\r\n        loginSuccess({\r\n          username: username,\r\n          token: token,\r\n        })\r\n      );\r\n    }\r\n  } catch (error) {\r\n    dispatch(loginFailure());\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loginUser = (values) => async (dispatch) => {\r\n  dispatch(login());\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://conduit.productionready.io/api/users/login\",\r\n      { user: values }\r\n    );\r\n    const { token, username } = response.data.user;\r\n    if (response.status === 200) {\r\n      localStorage.setItem(\"token\", token);\r\n      dispatch(\r\n        loginSuccess({\r\n          username: username,\r\n          token: token,\r\n        })\r\n      );\r\n    }\r\n  } catch (error) {\r\n    dispatch(loginFailure());\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => async (dispatch) => {\r\n  localStorage.removeItem(\"token\");\r\n  dispatch(logout());\r\n};\r\n\r\nexport const registerUser = (values) => async (dispatch) => {\r\n  dispatch(register());\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://conduit.productionready.io/api/users\",\r\n      { user: values }\r\n    );\r\n    if (response.status === 200) {\r\n      dispatch(registerSuccess());\r\n    }\r\n  } catch (error) {\r\n    dispatch(registerFailure());\r\n    throw error;\r\n  }\r\n};\r\n","export const home = \"/Blog-platform-with-router\";\r\nexport const login = `${home}/login`;\r\nexport const register = `${home}/register`;\r\nexport const main = `${home}/articles`;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport * as actions from \"../../Actions\";\nimport { Input, Button, Divider, message } from \"antd\";\nimport * as routes from \"../../routes.js\";\nimport \"antd/dist/antd.css\";\nimport \"./login.css\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    username: state.user.username,\n    token: state.user.token,\n    signin: actions.loginUser,\n    userStatus: state.user,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  signin: actions.loginUser,\n};\n\nfunction Login(props) {\n  const { token, signin, userStatus, username } = props;\n\n  if (token) {\n    return <Redirect to={routes.main} />;\n  }\n\n  return (\n    <div className=\"login-form\">\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        // validationSchema={SignupSchema}\n        onSubmit={(values) => signin(values)}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <div className={isSubmitting ? \"submitting-form\" : \"\"}>\n            <Form className=\"login-form___login\">\n              <label>\n                Email:\n                <Input\n                  required\n                  className={errors.email && touched.email && \"error\"}\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                />\n              </label>\n              <label>\n                Пароль:\n                <Input.Password\n                  required\n                  className={errors.password && touched.password && \"error\"}\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n              </label>\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                Войти\n              </Button>\n            </Form>\n            <Divider />\n            <Link className=\"login-form__register\" to={routes.register}>\n              Регистрация\n            </Link>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import Login from './Login';\r\n\r\nexport default Login;","import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Input, Button, Divider } from \"antd\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../Actions\";\nimport \"antd/dist/antd.css\";\nimport \"./register.css\";\nimport * as routes from \"../../routes.js\";\nimport * as yup from 'yup';\n\nconst SignupSchema = yup.object().shape({\n  username: yup.string().max(50, 'Слишком длинное имя').required('Поле обязательно для заполнения'),\n  email: yup.string().email('Неверный email').required('Поле обязательно для заполнения'),\n  password: yup\n    .string()\n    .min(8, 'Пароль должен содержать не менее 8 символов')\n    .max(40, 'Пароль должен содержать не более 40 символов')\n    .required('Поле обязательно для заполнения'),\n});\n\nconst mapStateToProps = (state) => {\n  const props = {\n    registerUser: actions.registerUser,\n    registerStatus: state.registerStatus,\n    token: state.user.token,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  registerUser: actions.registerUser,\n};\n\nfunction Register(props) {\n  const { registerUser, token } = props;\n\n  if (token) {\n    return <Redirect to={routes.main} />;\n  }\n\n  if (props.registerStatus === \"register-success\") {\n    return <Redirect to={routes.login} />;\n  }\n\n  const register = (values) => {\n    registerUser(values);\n  };\n\n  return (\n    <div className=\"register-form\">\n      <Formik\n        initialValues={{\n          username: \"\",\n          email: \"\",\n          password: \"\",\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values) => {\n          register(values);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <div className={isSubmitting ? \"submitting-form\" : \"\"}>\n            <Form className=\"register-form___registration\">\n              <label>\n                Имя пользователя:\n                <Input\n                  className={errors.username && touched.username && \"error\"}\n                  required\n                  name=\"username\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.username}\n                />\n              </label>\n              <label>\n                Email:\n                <Input\n                  className={errors.email && touched.email && \"error\"}\n                  required\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                />\n              </label>\n              {errors.email && touched.email && (\n                  <div className=\"input-error\">{errors.email}</div>\n                )}\n              <label>\n                Пароль:\n                <Input.Password\n                  className={errors.password && touched.password && \"error\"}\n                  required\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-error\">{errors.password}</div>\n                )}\n              </label>\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                Регистрация\n              </Button>\n            </Form>\n            <Divider />\n            <Link className=\"register-form__signin\" as={Button} to={routes.login}>\n              Войти\n            </Link>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\n","import Register from './Register';\r\n\r\nexport default Register;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, BackTop } from \"antd\";\nimport { UserOutlined, LogoutOutlined } from \"@ant-design/icons\";\nimport { Redirect } from \"react-router-dom\";\nimport * as actions from \"../../Actions\";\nimport * as routes from \"../../routes.js\";\nimport \"antd/dist/antd.css\";\nimport \"./main.css\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    userName: state.user.username,\n    loggedIn: state.loggedIn,\n    signout: actions.logoutUser,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  signout: actions.logoutUser,\n};\n\nfunction Main(props) {\n  const token = localStorage.getItem(\"token\");\n\n  if (!token) {\n    return <Redirect to={routes.home} />;\n  }\n\n  const { signout, userName } = props;\n\n  return (\n    <div className=\"main\">\n      <header className=\"main__header\">\n        <div>\n          Пользователь: <UserOutlined />\n          {userName}\n        </div>\n        <Button\n          className=\"main__header__logout\"\n          onClick={signout}\n          to={routes.home}\n        >\n          <LogoutOutlined /> Выйти\n        </Button>\n      </header>\n      <div className=\"main__wall\">\n        <div className=\"main__wall__post\">\n          <h3>Сделать пагинацию</h3>\n          <p>Посты</p>\n        </div>\n        <div className=\"main__wall__post\">\n          <h3>получить посты с АПИ</h3>\n          <p>Посты</p>\n        </div>\n        <div className=\"main__wall__post\">\n          <h3>Приватные роуты</h3>\n          <p>Сделать приватные роуты</p>\n        </div>\n        <div className=\"main__wall__post\">\n          <h3>ПОФИКСИТЬ ОТНОСИТЕЛЬНЫЕ РАЗМЕРЫ!!!!</h3>\n          <p>ПОФИКСИТЬ ОТНОСИТЕЛЬНЫЕ РАЗМЕРЫ!!!!</p>\n        </div>\n        <div className=\"main__wall__post\">\n          <h3>Декларативный</h3>\n          <p>\n            Создавать интерактивные пользовательские интерфейсы на React —\n            приятно и просто. Вам достаточно описать, как части интерфейса\n            приложения выглядят в разных состояниях. React будет своевременно их\n            обновлять, когда данные изменяются. Декларативные представления\n            сделают код более предсказуемым и упростят отладку.\n          </p>\n        </div>\n        <div className=\"main__wall__post\">\n          <h3>Основан на компонентах</h3>\n          <p>\n            Создавайте инкапсулированные компоненты с собственным состоянием, а\n            затем объединяйте их в сложные пользовательские интерфейсы.\n            Поскольку логика компонента написана на JavaScript, а не содержится\n            в шаблонах, можно с лёгкостью передавать самые разные данные по\n            всему приложению и держать состояние вне DOM.\n          </p>\n        </div>\n        <div className=\"main__wall__post\">\n          <h3>Научитесь однажды — пишите где угодно</h3>\n          <p>\n            Нам не нужно ничего знать про остальную часть вашего\n            технологического стека, поэтому вы можете разрабатывать новую\n            функциональность на React, не изменяя существующий код. React также\n            может работать на сервере, используя Node.js и на мобильных\n            платформах, используя React Native.\n          </p>\n        </div>\n      </div>\n      <BackTop />\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import Main from './Main';\r\n\r\nexport default Main;","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport * as actions from \"../Actions\";\nimport Login from \"../Components/Login\";\nimport Register from \"../Components/Register\";\nimport Main from \"../Components/Main\";\nimport { connect } from \"react-redux\";\nimport * as routes from \"../routes.js\";\nimport { message } from \"antd\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    username: state.user.username,\n    token: state.user.token,\n    loginWithJWT: actions.loginWithJWT,\n    userStatus: state.user,\n    registerStatus: state.registerStatus\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  loginWithJWT: actions.loginWithJWT,\n};\n\nfunction isError(status, register) {\n  if (status === \"error\") {\n    message.error(\"Пара логин и пароль не найдена\");\n  }\n  if (register === \"register-error\") {\n    message.error(\"Email или имя пользователя уже зарегистрированы!\");\n  }\n}\n\nfunction App(props) {\n  const { loginWithJWT, token, username, userStatus, registerStatus } = props;\n\n  isError(userStatus, registerStatus);\n\n  const localTokenChecking = () => {\n    const localStoreToken = localStorage.getItem(\"token\");\n    if (!localStoreToken && !token) {\n      return <Redirect to={routes.login} />;\n    }\n    if (localStoreToken && !token) {\n      loginWithJWT(localStoreToken);\n      return <Redirect to={routes.main} />;\n    }\n    return <Redirect to={routes.main} />;\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path={routes.home}>\n            {localTokenChecking()}\n          </Route>\n          <Route path={routes.login} exact component={Login} />\n          <Route path={routes.register} exact component={Register} />\n          <Route path={routes.main} exact component={Main} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import App from './App.jsx';\r\n\r\nexport default App;","import { combineReducers } from \"redux\";\r\nimport { handleActions } from \"redux-actions\";\r\nimport * as actions from \"../Actions\";\r\n\r\nconst user = handleActions(\r\n  {\r\n    [actions.login](_state) {\r\n      return \"requested\";\r\n    },\r\n    [actions.loginSuccess](_state, { payload: userData }) {\r\n      return userData;\r\n    },\r\n    [actions.loginFailure](_state) {\r\n      return \"error\";\r\n    },\r\n    [actions.logout](_state) {\r\n      return {};\r\n    },\r\n  },\r\n  {}\r\n);\r\n\r\nconst registerStatus = handleActions(\r\n  {\r\n    [actions.register](_state) {\r\n      return \"requested\";\r\n    },\r\n    [actions.registerSuccess](_state) {\r\n      return \"register-success\";\r\n    },\r\n    [actions.registerFailure](_state) {\r\n      return \"register-error\";\r\n    },\r\n  },\r\n  {}\r\n);\r\n\r\nexport default combineReducers({\r\n  user,\r\n  registerStatus,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReduxThunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport './index.css';\nimport App from './Container';\nimport reducers from './Reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(ReduxThunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  )\n);\n\nReactDOM.render(\n  <Provider classname=\"store\" store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}