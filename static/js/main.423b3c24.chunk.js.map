{"version":3,"sources":["Actions/index.js","routes.js","Components/Login/Login.jsx","Components/Login/index.js","Components/Register/Register.jsx","Components/Register/index.js","Components/Header/Header.jsx","Components/Header/index.js","Components/Main/Main.jsx","Components/Main/index.js","Components/AddArticle/AddArticle.jsx","Components/AddArticle/index.js","Container/App.jsx","Container/index.js","Reducers/index.js","serviceWorker.js","index.jsx"],"names":["login","createAction","loginSuccess","loginFailure","logout","register","registerSuccess","registerFailure","loginWithJWT","dispatch","a","token","localStorage","getItem","axios","get","headers","Authorization","response","status","data","user","username","loginUser","values","post","message","success","setItem","error","logoutUser","removeItem","registerUser","home","main","add_article","mapDispatchToProps","signin","actions","connect","Login","state","userStatus","props","className","initialValues","email","password","onSubmit","errors","touched","handleChange","handleBlur","isSubmitting","required","name","onChange","onBlur","value","Password","type","htmlType","to","routes","SignupSchema","yup","shape","max","min","Register","registerStatus","validationSchema","as","Button","signout","Header","userName","loggedIn","UserOutlined","onClick","LogoutOutlined","Main","renderArticle","heading","body","PlusCircleOutlined","AddArticle","title","description","tagList","App","localStoreToken","exact","path","component","handleActions","_state","payload","combineReducers","Boolean","window","location","hostname","match","store","createStore","reducers","compose","applyMiddleware","ReduxThunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","classname","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.423b3c24.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { createAction } from \"redux-actions\";\r\nimport { message } from \"antd\";\r\n\r\nexport const login = createAction(\"LOGIN_REQUEST\");\r\nexport const loginSuccess = createAction(\"LOGIN_SUCCESS\");\r\nexport const loginFailure = createAction(\"LOGIN_FAILURE\");\r\nexport const logout = createAction(\"LOGOUT\");\r\n\r\nexport const register = createAction(\"REGISTER_REQUEST\");\r\nexport const registerSuccess = createAction(\"REGISTER_SUCCESS\");\r\nexport const registerFailure = createAction(\"REGISTER_FAILURE\");\r\n\r\nexport const loginWithJWT = () => async (dispatch) => {\r\n  dispatch(login());\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const response = await axios.get(\r\n      \"https://conduit.productionready.io/api/user\",\r\n      {\r\n        headers: {\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      }\r\n    );\r\n    if (response.status === 200) {\r\n      const { username, token } = response.data.user;\r\n      dispatch(\r\n        loginSuccess({\r\n          username: username,\r\n          token: token,\r\n        })\r\n      );\r\n    }\r\n  } catch (error) {\r\n    dispatch(loginFailure());\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const loginUser = (values) => async (dispatch) => {\r\n  dispatch(login());\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://conduit.productionready.io/api/users/login\",\r\n      { user: values }\r\n    );\r\n    const { token, username } = response.data.user;\r\n    if (response.status === 200) {\r\n      message.success(`Добро пожаловать ${username}`);\r\n      localStorage.setItem(\"token\", token);\r\n      dispatch(\r\n        loginSuccess({\r\n          username: username,\r\n          token: token,\r\n        })\r\n      );\r\n    }\r\n  } catch (error) {\r\n    message.error(\"Пара логин и пароль не найдена\");\r\n    dispatch(loginFailure());\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => async (dispatch) => {\r\n  localStorage.removeItem(\"token\");\r\n  dispatch(logout());\r\n};\r\n\r\nexport const registerUser = (values) => async (dispatch) => {\r\n  dispatch(register());\r\n  try {\r\n    const response = await axios.post(\r\n      \"https://conduit.productionready.io/api/users\",\r\n      { user: values }\r\n    );\r\n    if (response.status === 200) {\r\n      message.success(\"Вы успешно зрегистрированы!\");\r\n      dispatch(registerSuccess());\r\n    }\r\n  } catch (error) {\r\n    message.error(\"Email или имя пользователя уже зарегистрированы!\");\r\n    dispatch(registerFailure());\r\n    throw error;\r\n  }\r\n};\r\n","export const home = \"/Blog-platform-with-router\";\r\nexport const login = `${home}/login`;\r\nexport const register = `${home}/register`;\r\nexport const main = `${home}/articles`;\r\nexport const add_article = `${main}/add`;\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport { Link } from \"react-router-dom\";\nimport * as actions from \"../../Actions\";\nimport { Input, Button, Divider } from \"antd\";\nimport * as routes from \"../../routes.js\";\nimport \"antd/dist/antd.css\";\nimport \"./login.css\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    username: state.user.username,\n    token: state.user.token,\n    signin: actions.loginUser,\n    userStatus: state.user,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  signin: actions.loginUser,\n};\n\nfunction Login(props) {\n  const { signin } = props;\n\n  return (\n    <div className=\"login-form\">\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        // validationSchema={SignupSchema}\n        onSubmit={(values) => signin(values)}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <div className={isSubmitting ? \"submitting-form\" : \"\"}>\n            <Form className=\"login-form___login\">\n              <label>\n                Email:\n                <Input\n                  required\n                  className={errors.email && touched.email && \"error\"}\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                />\n              </label>\n              <label>\n                Пароль:\n                <Input.Password\n                  required\n                  className={errors.password && touched.password && \"error\"}\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n              </label>\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                Войти\n              </Button>\n            </Form>\n            <Divider />\n            <Link className=\"login-form__register\" to={routes.register}>\n              Регистрация\n            </Link>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import Login from './Login';\r\n\r\nexport default Login;","import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Input, Button, Divider } from \"antd\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../Actions\";\nimport \"antd/dist/antd.css\";\nimport \"./register.css\";\nimport * as routes from \"../../routes.js\";\nimport * as yup from 'yup';\n\nconst SignupSchema = yup.object().shape({\n  username: yup.string().max(50, 'Слишком длинное имя').required('Поле обязательно для заполнения'),\n  email: yup.string().email('Неверный email').required('Поле обязательно для заполнения'),\n  password: yup\n    .string()\n    .min(8, 'Пароль должен содержать не менее 8 символов')\n    .max(40, 'Пароль должен содержать не более 40 символов')\n    .required('Поле обязательно для заполнения'),\n});\n\nconst mapStateToProps = (state) => {\n  const props = {\n    registerUser: actions.registerUser,\n    registerStatus: state.registerStatus,\n    token: state.user.token,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  registerUser: actions.registerUser,\n};\n\nfunction Register(props) {\n  const { registerUser } = props;\n\n  if (props.registerStatus === \"register-success\") {\n    return <Redirect to={routes.login} />;\n  }\n\n  const register = (values) => {\n    registerUser(values);\n  };\n\n  return (\n    <div className=\"register-form\">\n      <Formik\n        initialValues={{\n          username: \"\",\n          email: \"\",\n          password: \"\",\n        }}\n        validationSchema={SignupSchema}\n        onSubmit={(values) => {\n          register(values);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          isSubmitting,\n        }) => (\n          <div className={isSubmitting ? \"submitting-form\" : \"\"}>\n            <Form className=\"register-form___registration\">\n              <label>\n                Имя пользователя:\n                <Input\n                  className={errors.username && touched.username && \"error\"}\n                  required\n                  name=\"username\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.username}\n                />\n              </label>\n              <label>\n                Email:\n                <Input\n                  className={errors.email && touched.email && \"error\"}\n                  required\n                  name=\"email\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                />\n              </label>\n              {errors.email && touched.email && (\n                  <div className=\"input-error\">{errors.email}</div>\n                )}\n              <label>\n                Пароль:\n                <Input.Password\n                  className={errors.password && touched.password && \"error\"}\n                  required\n                  name=\"password\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-error\">{errors.password}</div>\n                )}\n              </label>\n              <Button\n                className=\"submit-button\"\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                Регистрация\n              </Button>\n            </Form>\n            <Divider />\n            <Link className=\"register-form__signin\" as={Button} to={routes.login}>\n              Войти\n            </Link>\n          </div>\n        )}\n      </Formik>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\n","import Register from './Register';\r\n\r\nexport default Register;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  LogoutOutlined,\r\n} from \"@ant-design/icons\";\r\nimport * as actions from \"../../Actions\";\r\nimport * as routes from \"../../routes.js\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./header.css\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  const props = {\r\n    userName: state.user.username,\r\n    loggedIn: state.loggedIn,\r\n    signout: actions.logoutUser,\r\n  };\r\n\r\n  return props;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  signout: actions.logoutUser,\r\n};\r\n\r\nfunction Header(props) {\r\n  const { userName, signout } = props;\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div>\r\n        Пользователь: <UserOutlined />\r\n        {userName}\r\n      </div>\r\n      <Button\r\n        className=\"header__logout\"\r\n        onClick={signout}\r\n        to={routes.home}\r\n      >\r\n        <LogoutOutlined /> Выйти\r\n      </Button>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import Header from './Header';\r\n\r\nexport default Header;","import React from \"react\";\nimport { BackTop } from \"antd\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport * as routes from \"../../routes.js\";\nimport Header from \"../Header\";\nimport \"antd/dist/antd.css\";\nimport \"./main.css\";\n\nfunction Main(props) {\n\n  const renderArticle = (heading, body) => (\n    <div className=\"main__wall__post\">\n      <h3>{heading}</h3>\n      <p>{body}</p>\n    </div>\n  );\n\n  return (\n    <div className=\"main\">\n      <Header />\n      <div className=\"main__wall\">\n        <Link to={routes.add_article} className=\"main__wall__create\">\n          <PlusCircleOutlined />\n          СОЗДАТЬ\n        </Link>\n        {renderArticle(\"Сделать пагинацию\", \"Посты\")}\n        {renderArticle(\n          \"Основан на компонентах\",\n          \"Создавайте инкапсулированные компоненты с собственным состоянием, а затем объединяйте их в сложные пользовательские интерфейсы. Поскольку логика компонента написана на JavaScript, а не содержится в шаблонах, можно с лёгкостью передавать самые разные данные по всему приложению и держать состояние вне DOM.\"\n        )}\n        {renderArticle(\n          \"Основан на компонентах\",\n          \"Создавайте инкапсулированные компоненты с собственным состоянием, а затем объединяйте их в сложные пользовательские интерфейсы. Поскольку логика компонента написана на JavaScript, а не содержится в шаблонах, можно с лёгкостью передавать самые разные данные по всему приложению и держать состояние вне DOM.\"\n        )}\n      </div>\n      <BackTop />\n    </div>\n  );\n}\n\nexport default Main;\n","import Main from './Main';\r\n\r\nexport default Main;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Input, Button, Divider } from \"antd\";\r\nimport * as actions from \"../../Actions\";\r\nimport Header from \"../Header\";\r\nimport \"./addArticle.css\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  const props = {\r\n    userName: state.user.username,\r\n    loggedIn: state.loggedIn,\r\n    signout: actions.logoutUser,\r\n  };\r\n\r\n  return props;\r\n};\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nfunction AddArticle(props) {\r\n  return (\r\n    <div className=\"main\">\r\n      <Header />\r\n      <Formik\r\n        initialValues={{\r\n          title: \"\",\r\n          description: \"\",\r\n          body: \"\",\r\n          tagList: '',\r\n        }}\r\n        onSubmit={() => null}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          isSubmitting,\r\n        }) => (\r\n          <div className={isSubmitting ? \"submitting-form\" : \"\"}>\r\n            <Form className=\"login-form___login\">\r\n              <label>\r\n                Заголовок:\r\n                <Input\r\n                  required\r\n                  className=\"title\"\r\n                  name=\"title\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.title}\r\n                />\r\n              </label>\r\n              <label>\r\n                Описание:\r\n                <Input\r\n                  required\r\n                  className=\"description\"\r\n                  name=\"description\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.description}\r\n                />\r\n              </label>\r\n              <label>\r\n                Статья:\r\n                <Input\r\n                  className=\"tagList\"\r\n                  name=\"tagList\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.tagList}\r\n                />\r\n              </label>\r\n              <label>\r\n                Теги:\r\n                <Input\r\n                  required\r\n                  className=\"body\"\r\n                  name=\"body\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.body}\r\n                />\r\n              </label>\r\n            </Form>\r\n          </div>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddArticle);\r\n","import AddArticle from './AddArticle';\r\n\r\nexport default AddArticle;","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport * as actions from \"../Actions\";\nimport { connect } from \"react-redux\";\nimport * as routes from \"../routes.js\";\nimport Login from \"../Components/Login\";\nimport Register from \"../Components/Register\";\nimport Main from \"../Components/Main\";\nimport AddArticle from \"../Components/AddArticle\";\n\nconst mapStateToProps = (state) => {\n  const props = {\n    username: state.user.username,\n    token: state.user.token,\n    loginWithJWT: actions.loginWithJWT,\n    userStatus: state.user,\n    registerStatus: state.registerStatus,\n  };\n\n  return props;\n};\n\nconst mapDispatchToProps = {\n  loginWithJWT: actions.loginWithJWT,\n};\n\nfunction App(props) {\n  const { loginWithJWT, token } = props;\n  const localStoreToken = localStorage.getItem(\"token\");\n\n  const startTokenChecking = () => {\n    if (!localStoreToken && !token) {\n      return <Redirect to={routes.login} />;\n    }\n    if (localStoreToken && !token) {\n      loginWithJWT(localStoreToken);\n      return <Redirect to={routes.main} />;\n    }\n    return <Redirect to={routes.main} />;\n  };\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path={routes.home}>\n            {startTokenChecking()}\n          </Route>\n          <Route path={routes.login} exact component={Login}>\n            {localStoreToken ? <Redirect to={routes.main} /> : null}\n          </Route>\n          <Route path={routes.register} exact component={Register}>\n            {localStoreToken ? <Redirect to={routes.main} /> : null}\n          </Route>\n          <Route path={routes.main} exact component={Main}>\n            {!localStoreToken ? <Redirect to={routes.login} /> : null}\n          </Route>\n          <Route path={routes.add_article} exact component={AddArticle}>\n            {!localStoreToken ? <Redirect to={routes.login} /> : null}\n          </Route>\n          <Route path=\"*\" component={() => \"404 ТАКОЙ СТРАНИЦЫ НЕ СУЩЕСТВУЕТ!\"} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import App from './App.jsx';\r\n\r\nexport default App;","import { combineReducers } from \"redux\";\r\nimport { handleActions } from \"redux-actions\";\r\nimport * as actions from \"../Actions\";\r\n\r\nconst user = handleActions(\r\n  {\r\n    [actions.login](_state) {\r\n      return \"requested\";\r\n    },\r\n    [actions.loginSuccess](_state, { payload: userData }) {\r\n      return userData;\r\n    },\r\n    [actions.loginFailure](_state) {\r\n      return \"error\";\r\n    },\r\n    [actions.logout](_state) {\r\n      return {};\r\n    },\r\n  },\r\n  {}\r\n);\r\n\r\nconst registerStatus = handleActions(\r\n  {\r\n    [actions.register](_state) {\r\n      return \"requested\";\r\n    },\r\n    [actions.registerSuccess](_state) {\r\n      return \"register-success\";\r\n    },\r\n    [actions.registerFailure](_state) {\r\n      return \"register-error\";\r\n    },\r\n  },\r\n  {}\r\n);\r\n\r\nexport default combineReducers({\r\n  user,\r\n  registerStatus,\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReduxThunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport './index.css';\nimport App from './Container';\nimport reducers from './Reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(ReduxThunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  )\n);\n\nReactDOM.render(\n  <Provider classname=\"store\" store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}